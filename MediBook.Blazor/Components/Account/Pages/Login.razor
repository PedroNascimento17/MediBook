@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using MediBook.Domain.Entities
@using MediBook.Domain.Models
@using MediBook.Infrastructure.Context
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@attribute [AllowAnonymous]

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor httpContextAccessor
@inject IdentityUserAccessor UserAccessor
@inject UserData userData
@inject MediBook.Domain.Abstractions.IPatientRepository patientRepository
@inject MediBook.Domain.Abstractions.IDoctorRepository doctorRepository

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="Remember me" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
                <div>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">Esqueci minha senha</FluentAnchor>
                    </p>
                </div>
            </FluentStack>
        </EditForm>
    </FluentGridItem>   
</FluentGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ApplicationUser? user;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {          
            if (httpContextAccessor?.HttpContext != null && user == null)
            {
                user = await UserAccessor.GetRequiredUserAsync(httpContextAccessor.HttpContext);
                await DefineUserType();
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Email ou senha incorretos.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Mantenha-me conectado")]
        public bool RememberMe { get; set; }
    }

    async Task DefineUserType()
    {
        if (user == null)
        {
            return;
        }

        var doctor = await doctorRepository.GetByUser(user.Id);

        if (doctor != null)
        {
            userData.UserType = UserType.Doctor;
            return;
        }

        var patient = await patientRepository.GetByUser(user.Id);

        if (patient != null)
        {
            userData.UserType = UserType.Patient;
            return;
        }

        userData.UserType = UserType.Admin;
    }
}
