@using MediBook.Blazor.Components.Account
@using MediBook.Domain.Entities
@using MediBook.Domain.Models
@rendermode InteractiveServer

@implements IDisposable

@inject NavigationManager NavigationManager
@inject UserData userData

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu" onclick="document.getElementById('navmenu-toggle').click();">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded">
            <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
                    @if (userData.UserType == UserType.Admin)
                    {
                        <FluentNavLink Href="medicalspecialties" Icon="@(new Icons.Regular.Size20.AddSquare())" IconColor="Color.Accent">Especialidades</FluentNavLink>
                        <FluentNavLink Href="doctors" Icon="@(new Icons.Regular.Size20.Doctor())" IconColor="Color.Accent">Médicos</FluentNavLink>
                        <FluentNavLink Href="patients" Icon="@(new Icons.Regular.Size20.PeopleAudience())" IconColor="Color.Accent">Pacientes</FluentNavLink>
                        <FluentNavLink Href="medicaldiaries" Icon="@(new Icons.Regular.Size20.CalendarAgenda())" IconColor="Color.Accent">Agenda Médica</FluentNavLink>
                        <FluentNavLink Href="appointments" Icon="@(new Icons.Regular.Size20.PeopleList())" IconColor="Color.Accent">Consultas</FluentNavLink>
                    }
                    else if (userData.UserType == UserType.Patient)
                    {
                        <FluentNavLink Href="appointments" Icon="@(new Icons.Regular.Size20.PeopleList())" IconColor="Color.Accent">Consultas</FluentNavLink>
                        <FluentNavLink Href="Patients/edit">@context.User.Identity?.Name</FluentNavLink>
                    }
                    else if (userData.UserType == UserType.Doctor)
                    {
                        <FluentNavLink Href="appointments" Icon="@(new Icons.Regular.Size20.PeopleList())" IconColor="Color.Accent">Consultas</FluentNavLink>
                        <FluentNavLink Href="medicaldiaries" Icon="@(new Icons.Regular.Size20.CalendarAgenda())" IconColor="Color.Accent">Agenda Médica</FluentNavLink>
                        <FluentNavLink Href="Doctors/edit">@context.User.Identity?.Name</FluentNavLink>
                    }
                  
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                    </form>
                </Authorized>
            </AuthorizeView>                    
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {       
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;        
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }  
}
