@page "/"
@using MediBook.Blazor.Components.Account
@using MediBook.Domain.Abstractions
@using MediBook.Domain.Entities
@using MediBook.Domain.Models
@inject UserData userData
@inject IdentityUserAccessor UserAccessor
@inject IHttpContextAccessor httpContextAccessor
@inject IAppointmentRepository appointmentRepository
@inject IPatientRepository patientRepository
@inject IToastService ToastService

<PageTitle>Home</PageTitle>

<FluentGrid>
    <FluentGridItem xs="12" sm="12">
        <img src="/images/logomedibook.png" />
    </FluentGridItem>
    @if (userData.UserType == UserType.Patient && appointments != null && appointments.Any())
    {
        foreach (var appointment in appointments)
        {
            <FluentGridItem xs="3" sm="3">
                <FluentCard>
                    @if (DaysLeft(appointment.MedicalDiary.DateAndTime) < 3)
                    {
                        <FluentBadge Fill="somevalue" BackgroundColor="red" Color="white">Consulta Próxima</FluentBadge>
                    }
                    <FluentLabel><b>Data/Hora</b>: @appointment.MedicalDiary.DateAndTime.ToString("dd/MM/yyyy HH:mm")</FluentLabel> <br />
                    <FluentLabel><b>Médico</b>: @appointment.MedicalDiary.Doctor.Name</FluentLabel> <br />
                    <FluentLabel><b>Médico</b>: @appointment.MedicalDiary.MedicalSpecialty.Name</FluentLabel> <br />
                </FluentCard>
            </FluentGridItem>
            
        }
    }
    
</FluentGrid>

@code {
    IQueryable<Appointment>? appointments;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        if (userData.UserType == UserType.Patient && httpContextAccessor.HttpContext != null)
        {
            var user = await UserAccessor.GetRequiredUserAsync(httpContextAccessor.HttpContext);
            var patient = await patientRepository.GetByUser(user.Id);
            appointments = (await appointmentRepository.GetByIdAll(patient.PatientID)).AsQueryable();

            foreach (var appointment in appointments)
            {
                @if (DaysLeft(appointment.MedicalDiary.DateAndTime) < 3)
                {
                    ToastService.ShowWarning($"Consulta de {appointment.MedicalDiary.MedicalSpecialty.Name} do dia {appointment.MedicalDiary.DateAndTime:dd/MM/yyyy HH:mm} com o médico {appointment.MedicalDiary.Doctor.Name} está próxima");
                }
            }
        }
    }

    int DaysLeft(DateTime date)
    {
        TimeSpan diff = date - DateTime.Today;
        return (int)diff.TotalDays;
    }
}