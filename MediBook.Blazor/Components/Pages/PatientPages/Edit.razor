@page "/Patients/edit"
@inject MediBook.Domain.Abstractions.IPatientRepository patientRepository
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IZipService zipService
@inject IdentityUserAccessor UserAccessor
@inject IHttpContextAccessor httpContextAccessor
@rendermode InteractiveServer
@using MediBook.Application.Mappers
@using MediBook.Blazor.Components.Account
@using MediBook.Domain.Abstractions
@using MediBook.Domain.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using MediBook.Domain.Entities
@using Microsoft.AspNetCore.Http

<PageTitle>Editar Paciente</PageTitle>

<h1>Paciente</h1>

<h4>Editar</h4>
<hr />

@if (Patient is null)
{
    <img src="/images/loading.gif" height="120" width="120" />
    <br />
}
else
{
    <FluentGrid>
        <FluentGridItem xs="6" sm="6">
            <EditForm method="post" Model="Patient" OnValidSubmit="UpdatePatient" FormName="update" Enhance>
                <DataAnnotationsValidator />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Name="Patient.Name" @bind-Value="Patient.Name" Required="true" Placeholder="Nome..." Label="Nome" Style="width: 100%" />
                    <FluentValidationMessage For="() => Patient.Name" class="text-danger" />
                    <br />
                    <FluentTextField Name="Patient.Cpf" @bind-Value="Patient.Cpf" Placeholder="CPF..." Label="CPF" Style="width: 100%" />
                    <FluentValidationMessage For="() => Patient.Cpf" class="text-danger" />
                    <br />
                    <FluentDatePicker Name="Patient.BirthDate" @bind-Value="@Patient.BirthDate" Label="Data de nascimento" Style="width: 100%" />
                    <FluentValidationMessage For="() => Patient.BirthDate" class="text-danger" />
                    <br />
                    <FluentRadioGroup Name="Patient.Gender" @bind-Value="Patient.Gender" Label="Sexo">
                        <FluentRadio Value="@("m")">Masculino</FluentRadio>
                        <FluentRadio Value="@("f")">Feminino</FluentRadio>
                    </FluentRadioGroup>
                    <FluentValidationMessage For="() => Patient.Gender" class="text-danger" />
                    <br />
                    <FluentTextField @onfocusout="LoadCep" Name="Patient.ZipCode" @bind-Value="Patient.ZipCode" Label="CEP" Style="width: 100%" />
                    <FluentValidationMessage For="() => Patient.ZipCode" class="text-danger" />

                    @if (ZipData is not null)
                    {
                        <FluentGrid AdaptiveRendering="true" Style="background-color: var(--neutral-layer-3); padding: 4px;">
                            <FluentGridItem sm="6">
                                <div class="card">
                                    <FluentLabel><b>Logradouro:</b></FluentLabel>
                                    <FluentLabel>@ZipData.Logradouro</FluentLabel>
                                </div>
                            </FluentGridItem>
                            <FluentGridItem sm="6">
                                <div class="card">
                                    <FluentLabel><b>Bairro:</b></FluentLabel>
                                    <FluentLabel>@ZipData.Bairro</FluentLabel>
                                </div>
                            </FluentGridItem>
                            <FluentGridItem sm="7">
                                <div class="card">
                                    <FluentLabel><b>Cidade:</b></FluentLabel>
                                    <FluentLabel>@ZipData.Localidade</FluentLabel>
                                </div>
                            </FluentGridItem>
                            <FluentGridItem sm="5">
                                <div class="card">
                                    <FluentLabel><b>UF:</b></FluentLabel>
                                    <FluentLabel>@ZipData.Uf</FluentLabel>
                                </div>
                            </FluentGridItem>
                            <br />
                            <br />
                        </FluentGrid>
                    }

                    <FluentNumberField Name="Patient.AddressNumber" @bind-Value="Patient.AddressNumber" Label="Número" Style="width: 100%" />
                    <br />
                    <FluentTextField Name="Patient.AddressComplement" @bind-Value="Patient.AddressComplement" Label="Complemento" Style="width: 100%" />
                    <FluentValidationMessage For="() => Patient.AddressComplement" class="text-danger" />
                    <br />
                    <FluentTextField Disabled="true" @bind-Value="Patient.ApplicationUser.Email" Label="Email" Style="width: 100%" />
                    <br />
                    <FluentSwitch Style="width: 150px;" @bind-Value="changePassword">Mudar senha</FluentSwitch>
                    <br />

                    @if (changePassword)
                    {
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentTextField type="password" Name="Doctor.User.OldPassword" @bind-Value="Patient.User.OldPassword" Required="@changePassword" Placeholder="Senha atual..." Label="Senha Atual" Style="width: 100%" />
                            <FluentValidationMessage For="() => Patient.User.OldPassword" class="text-danger" />
                            <br />
                            <FluentTextField type="password" Name="Doctor.User.Password" @bind-Value="Patient.User.Password" Required="@changePassword" Placeholder="Nova senha..." Label="Nova Senha" Style="width: 100%" />
                            <FluentValidationMessage For="() => Patient.User.Password" class="text-danger" />
                            <br />
                            <FluentTextField type="password" Name="Doctor.User.ConfirmPassword" @bind-Value="Patient.User.ConfirmPassword" Required="@changePassword" Placeholder="Confirmar senha..." Label="Confirmar Senha" Style="width: 100%" />
                            <FluentValidationMessage For="() => Patient.User.ConfirmPassword" class="text-danger" />
                            <br />
                        </FluentStack>
                    }
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Salvar</FluentButton>
                </FluentStack>
            </EditForm>
        </FluentGridItem>
    </FluentGrid>
}

<div>
    <br /><br />
    <a href="/patients">Voltar</a>
</div>

@code {
    bool changePassword = false;
    private IEnumerable<IdentityError>? identityErrors;
    public ZipData? ZipData { get; set; }

    [SupplyParameterFromQuery]
    public Guid PatientID { get; set; }

    [SupplyParameterFromForm]
    public Patient? Patient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PatientID == Guid.Empty && httpContextAccessor.HttpContext != null)
        {
            var user = await UserAccessor.GetRequiredUserAsync(httpContextAccessor.HttpContext);
            Patient ??= await patientRepository.GetByUser(user.Id);
        }

        Patient ??= await patientRepository.Get(PatientID);

        if (Patient is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (!string.IsNullOrWhiteSpace(Patient?.ZipCode))
        {
            await LoadCep(new FocusEventArgs());
        }        
    }

    public async Task UpdatePatient()
    {
        if (Patient == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        var updated = await patientRepository.Update(Patient);

        if (!updated)
        {
            ToastService.ShowError("Não foi possível alterar o médico. Revise os dados e tente novamente");
            return;
        }

        ToastService.ShowSuccess("Paciente salvo com sucesso");

        var changed = true;

        if (changePassword)
        {
            changed = await ChangePassword();
        }

        if (changed && PatientID != Guid.Empty)
        {
            NavigationManager.NavigateTo("/patients");
        }
        else if (changed && PatientID == Guid.Empty)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async Task<bool> ChangePassword()
    {
        if (Patient == null)
        {
            NavigationManager.NavigateTo("notfound");
            return false;
        }

        var changePasswordResult = await UserManager.ChangePasswordAsync(Patient.ApplicationUser, Patient.User.OldPassword, Patient.User.Password);
        if (!changePasswordResult.Succeeded)
        {
            identityErrors = changePasswordResult.Errors.Select(e => IdentityErrorMapper.MapToPortugueseIdentityError(e));
            ShowErrors();
            return false;
        }

        ToastService.ShowSuccess("Senha alterada com sucesso");
        return true;
    }

    void ShowErrors()
    {
        if (identityErrors == null)
        {
            return;
        }

        foreach (var identityError in identityErrors)
        {
            ToastService.ShowError(identityError.Description);
        }
    }

    async Task LoadCep(FocusEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(Patient?.ZipCode) || Patient.ZipCode.Length < 8)
        {
            return; 
        }

        var zipData = await zipService.GetZip(Patient?.ZipCode ?? "");

        if (string.IsNullOrWhiteSpace(zipData.Localidade) && !string.IsNullOrWhiteSpace(zipData.Logradouro))
        {
            ToastService.ShowWarning(zipData?.Logradouro ?? "");
            return;
        }

        ZipData = zipData;
    }
}
